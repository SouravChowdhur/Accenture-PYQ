class Solution {
public:
    int maxElement(vector<int>& piles){
        int maxi = INT_MIN;
        for(int i=0; i<piles.size(); i++){
            maxi = max(maxi, piles[i]);
        }
        return maxi;
    }

    long long int calculateTotalHours(vector<int>& piles, int hourly){
        long long int totalHours = 0;
        for(int i=0; i<piles.size(); i++){
            long long int div = piles[i] / hourly;
            totalHours += div;
            if(piles[i] % hourly != 0) totalHours++;
        }
        return totalHours;
    }

    int minEatingSpeed(vector<int>& piles, int h) {
        int ans = -1;
        int low = 1;
        int high = maxElement(piles);
        
        int mid = low + (high - low)/2;
        while(low <= high){
            long long int totalHours = calculateTotalHours(piles, mid);
            if(totalHours <= h){
                ans = mid;
                high = mid - 1;
            }
            else{
                low = mid + 1;
            }
            mid = low + (high - low)/2;
        }

        return ans;
    }
};
